import os
import asyncio
from playwright.async_api import async_playwright
import pandas as pd
from datetime import datetime, timedelta
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message


class ScheduleStates(StatesGroup):
    waiting_for_url = State()


def parse_group_info(grupa_val: str) -> str:
    if not isinstance(grupa_val, str):
        return ""
    grupa_val = grupa_val.strip()
    if "WykS" in grupa_val:
        return "Wyk≈Çad"
    elif "Cw" in grupa_val:
        import re
        match = re.search(r"Cw(\d+)S", grupa_val)
        if match:
            return f"ƒÜwiczenia (grupa {match.group(1)})"
        else:
            return "ƒÜwiczenia"
    return grupa_val


async def download_schedule(url: str, save_path: str) -> str:
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)  # Headless
        page = await browser.new_page()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ URL —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        await page.goto(url, timeout=60000)

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç—å "Zezw√≥l" –Ω–∞ –∫—É–∫–∏/–ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        try:
            await page.click("button:has-text('Zezw√≥l')", timeout=5000)
        except:
            pass  # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        # –ñ–¥—ë–º –∏ –∫–ª–∏–∫–∞–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫—É "Ca≈Çy semestr"
        try:
            labels = await page.query_selector_all("label.custom-control-label")
            for lbl in labels:
                text = (await lbl.inner_text()).strip()
                if text == "Ca≈Çy semestr":
                    await lbl.click()
                    break
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ 'Ca≈Çy semestr':", e)

        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ SzukajLogout –∏ –∫–ª–∏–∫–∞–µ–º
        try:
            await page.wait_for_selector("a#SzukajLogout", timeout=60000)
            await page.click("a#SzukajLogout")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ SzukajLogout:", e)
            await page.screenshot(path="debug_szukaj.png")
            await browser.close()
            raise e

        # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å—Å—è
        await asyncio.sleep(5)

        # –°–∫–∞—á–∞—Ç—å CSV
        try:
            link = await page.wait_for_selector("a[href*='WydrukTokuCsv']:visible", timeout=60000)
            async with page.expect_download(timeout=120000) as download_info:
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
                    await link.click()
                except:
                    # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (headless / –Ω–µ–≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç), –∫–ª–∏–∫–∞–µ–º —á–µ—Ä–µ–∑ JS
                    await link.evaluate("el => el.click()")
            download = await download_info.value
            await download.save_as(save_path)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ CSV:", e)
            await page.screenshot(path="debug_download.png")
            await browser.close()
            raise e

        await browser.close()
        return save_path


# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = '7353399540:AAHtYxx9ftGvs10iWXhvDSVPQgA4tDYKVEE'
SCHEDULE_FILE = 'Plany.csv'
logging.basicConfig(level=logging.INFO)

user_groups: dict[int, int] = {}

USER_SCHEDULES_DIR = "user_schedules"

if not os.path.exists(USER_SCHEDULES_DIR):
    os.makedirs(USER_SCHEDULES_DIR)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_notifications: dict[int, bool] = {}


def get_user_schedule_file(user_id: int) -> str:
    folder = "user_schedules"
    os.makedirs(folder, exist_ok=True)  # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ—Ç
    return os.path.join(folder, f"{user_id}.csv")


# --- –§–û–ù. –ó–ê–î–ê–ß–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---
async def send_notifications():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –ø–∞—Ä—ã —Ç–µ–º, —É –∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    while True:
        try:
            now = datetime.now()
            time_plus_5 = (now + timedelta(minutes=5)).strftime("%H:%M")

            for user_id, enabled in list(user_notifications.items()):
                if not enabled:
                    continue
                try:
                    # —á–∏—Ç–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    df = read_schedule(user_id)
                    if df.empty or 'Czas od' not in df.columns:
                        continue

                    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
                    df['Czas od'] = df['Czas od'].astype(str).str.strip()

                    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –≤—Ä–µ–º–µ–Ω–µ–º = now+5min
                    upcoming = df[(df['Data_dt'] == now.date()) & (df['Czas od'] == time_plus_5)]
                    for _, row in upcoming.iterrows():
                        text = f"‚è∞ –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç: {row.get('Zajecia', '(–ø—Ä–µ–¥–º–µ—Ç)')} | {row.get('Sala', '(–∑–∞–ª–∞)')}"
                        await bot.send_message(user_id, text)
                except Exception as e_user:
                    logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e_user}")

            await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ send_notifications loop: {e}")
            await asyncio.sleep(5)  # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–µ


# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_keyboard(user_id: int) -> InlineKeyboardMarkup:
    notif_state = user_notifications.get(user_id, False)
    notif_text = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –í–ö–õ" if notif_state else "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –í–´–ö–õ"

    group_num = user_groups.get(user_id, 0)
    if group_num == 0:
        group_text = "üë• –§–∏–ª—å—Ç—Ä: –í—Å–µ –≥—Ä—É–ø–ø—ã"
    else:
        group_text = f"üë• –§–∏–ª—å—Ç—Ä: {group_num} –≥—Ä—É–ø–ø–∞"

    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóìÔ∏è –°–µ–≥–æ–¥–Ω—è", callback_data="show_today"),
         InlineKeyboardButton(text="üóìÔ∏è –ó–∞–≤—Ç—Ä–∞", callback_data="show_tomorrow")],
        [InlineKeyboardButton(text="üìÖ –ù–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="show_month"),
         InlineKeyboardButton(text="üìÖ –ù–∞ —Å–ª–µ–¥ –º–µ—Å—è—Ü", callback_data="show_next_month")],
        [InlineKeyboardButton(text=notif_text, callback_data="toggle_notifications")],
        [InlineKeyboardButton(text=group_text, callback_data="toggle_group")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="update_schedule")]
    ])


def get_back_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])


def get_day_navigation_keyboard(current_date: datetime.date, min_date: datetime.date,
                                max_date: datetime.date) -> InlineKeyboardMarkup:
    nav_buttons = []

    if current_date > min_date:
        prev_day = current_date - timedelta(days=1)
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"day_{prev_day.isoformat()}"
        ))

    if current_date < max_date:
        next_day = current_date + timedelta(days=1)
        nav_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"day_{next_day.isoformat()}"
        ))

    # –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤
    keyboard = []
    if nav_buttons:
        keyboard.append(nav_buttons)  # –ø–µ—Ä–≤—ã–π —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è

    # –≤—Ç–æ—Ä–æ–π —Ä—è–¥ ‚Äî –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# --- –ß–¢–ï–ù–ò–ï –ò –û–ë–†–ê–ë–û–¢–ö–ê CSV ---
def read_schedule(user_id: int) -> pd.DataFrame:
    """–ß–∏—Ç–∞–µ—Ç CSV-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π Data_dt (datetime.date)."""
    SCHEDULE_FILE = get_user_schedule_file(user_id)

    if not os.path.exists(SCHEDULE_FILE):
        logging.info(f"–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return pd.DataFrame()

    try:
        # —á–∏—Ç–∞–µ–º CSV –±–µ–∑ header (—É —Ç–µ–±—è –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏
        df = pd.read_csv(SCHEDULE_FILE, sep=';', skiprows=2, header=None, skipinitialspace=True)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return pd.DataFrame()

    df.dropna(how="all", inplace=True)
    if df.empty:
        return pd.DataFrame()

    n_cols = df.shape[1]
    logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {n_cols}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    default_cols = ["temp0", "Czas od", "Czas do", "Liczba godzin", "Grupy",
                    "Zajecia", "Sala", "Forma zaliczenia", "Uwagi", "temp_extra"]
    if n_cols > len(default_cols):
        extra = [f"temp{idx}" for idx in range(len(default_cols), n_cols)]
        col_names = default_cols + extra
    else:
        col_names = default_cols[:n_cols]

    df.columns = col_names

    # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–∞–º–∏
    current_date = None
    dates = []
    for _, row in df.iterrows():
        first_col = str(row.iloc[0]).strip() if pd.notna(row.iloc[0]) else ""
        if first_col.startswith("Data Zajec"):
            try:
                parts = first_col.split()
                current_date = datetime.strptime(parts[2], "%Y.%m.%d").date()
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{first_col}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                current_date = None
            dates.append(None)
        else:
            dates.append(current_date)

    df["Data_dt"] = dates

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã
    if "Czas od" in df.columns:
        df["Czas od"] = df["Czas od"].astype(str).str.strip()
    else:
        logging.warning(f"–í —Ñ–∞–π–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ 'Czas od'")

    df = df[df['Data_dt'].notna() & df['Czas od'].notna()].copy()
    logging.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(df)}")

    return df


# --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø ---
def format_schedule(df: pd.DataFrame, title: str, user_id: int) -> str:
    if df.empty:
        return f"{title} –ø—É—Å—Ç–æ üì≠"

    # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ
    group_num = user_groups.get(user_id, 0)  # 0 = –≤—Å–µ –≥—Ä—É–ø–ø—ã
    if group_num > 0 and "Grupy" in df.columns:
        def belongs_to_group(grupa_val: str) -> bool:
            if not isinstance(grupa_val, str):
                return False
            grupa_val = grupa_val.strip()
            if "WykS" in grupa_val:  # –ª–µ–∫—Ü–∏—è (–¥–ª—è –≤—Å–µ—Ö)
                return True
            return f"Cw{group_num}S" in grupa_val  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –≥—Ä—É–ø–ø–∞

        df = df[df["Grupy"].apply(belongs_to_group)]

    if df.empty:
        return f"{title} (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞) –ø—É—Å—Ç–æ üì≠"

    # –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    lines = [f"üìÖ {title}:\n"]
    days_map = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    for date, group in df.groupby("Data_dt"):
        day_of_week = days_map[date.weekday()]
        lines.append(f"üóìÔ∏è {day_of_week}, {date:%d.%m.%Y}")
        lines.append('')

        group = group.copy()
        group['czas_od_dt'] = pd.to_datetime(group['Czas od'], format="%H:%M", errors='coerce')

        for _, row in group.sort_values(by='czas_od_dt').iterrows():
            zajecia_type = parse_group_info(row.get("Grupy", ""))
            lines.append(f"‚è∞ {row['Czas od']} - {row['Czas do']}")
            lines.append(f"üë• {zajecia_type}")
            lines.append(f"üìñ {row['Zajecia']}")
            lines.append(f"üè´ {row['Sala']}")

            uwagi = str(row.get('Uwagi', '')).strip()
            if uwagi and uwagi.lower() != 'nan':
                lines.append(f"üìù {uwagi}")

            lines.append("")
        lines.append("")

    return "\n".join(lines)


# --- –ü–û–õ–£–ß–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø ---
async def get_schedule_data_for_day(date: datetime.date, user_id: int) -> str:
    df = read_schedule(user_id)
    if df.empty:
        return "‚ùå –í–∞—à —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç."
    day_df = df[df['Data_dt'] == date]
    return format_schedule(day_df, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date:%d.%m.%Y}", user_id)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
@dp.message(CommandStart())
async def send_welcome(message: Message):
    user_id = message.from_user.id
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–Ω—è—Ç–∏—è.\n\n"
        "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª `Plany.csv`."
    )
    await message.answer(text, reply_markup=get_main_keyboard(user_id))


@dp.message(F.document)
async def handle_file_upload(message: Message):
    user_id = message.from_user.id
    document = message.document

    if document.file_name.lower().endswith('.csv'):
        try:
            file = await bot.get_file(document.file_id)
            file_path = get_user_schedule_file(user_id)
            await bot.download_file(file.file_path, file_path)
            await message.reply("‚úÖ –í–∞—à —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            await send_welcome(message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {e}")
    else:
        await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.csv`.")


@dp.callback_query(F.data.startswith('show_'))
async def show_schedule_callback(callback: types.CallbackQuery):
    timeframe = callback.data[5:]
    user_id = callback.from_user.id
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    today = datetime.now().date()

    if timeframe == 'today':
        text = await get_schedule_data_for_day(today, user_id)
        keyboard = get_day_navigation_keyboard(today, today, today)
        await callback.message.edit_text(text, reply_markup=keyboard)

    elif timeframe == 'tomorrow':
        date = today + timedelta(days=1)
        text = await get_schedule_data_for_day(date, user_id)
        # min/max –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ç–µ–∫—É—â–∏–º –º–µ—Å—è—Ü–µ–º
        min_d = date.replace(day=1)
        if date.month == 12:
            max_d = date.replace(year=date.year + 1, month=1, day=1) - timedelta(days=1)
        else:
            max_d = date.replace(month=date.month + 1, day=1) - timedelta(days=1)
        keyboard = get_day_navigation_keyboard(date, min_d, max_d)
        await callback.message.edit_text(text, reply_markup=keyboard)

    elif timeframe in ['month', 'next_month']:
        if timeframe == 'month':
            first_day = today.replace(day=1)
        else:
            # —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            if today.month == 12:
                first_day = today.replace(year=today.year + 1, month=1, day=1)
            else:
                first_day = today.replace(month=today.month + 1, day=1)

        if first_day.month == 12:
            last_day = first_day.replace(year=first_day.year + 1, month=1, day=1) - timedelta(days=1)
        else:
            last_day = first_day.replace(month=first_day.month + 1, day=1) - timedelta(days=1)

        text = await get_schedule_data_for_day(first_day, user_id)
        keyboard = get_day_navigation_keyboard(first_day, first_day, last_day)
        await callback.message.edit_text(text, reply_markup=keyboard)

    else:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π timeframe. –ò—Å–ø–æ–ª—å–∑—É–π 'today', 'tomorrow', 'month' –∏–ª–∏ 'next_month'.",
            reply_markup=get_back_keyboard()
        )


@dp.callback_query(lambda c: c.data == "update_schedule")
async def process_update(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∏–∑ —Å–∞–π—Ç–∞ —É–Ω–∏–≤–µ—Ä–∞):")
    await state.set_state(ScheduleStates.waiting_for_url)


@dp.callback_query(F.data == "toggle_group")
async def toggle_group(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_group = user_groups.get(user_id, 0)

    # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º 0 -> 1 -> 2 -> 3 -> —Å–Ω–æ–≤–∞ 0
    new_group = (current_group + 1) % 4
    user_groups[user_id] = new_group

    keyboard = get_main_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard)

    group_text = "–í—Å–µ –≥—Ä—É–ø–ø—ã" if new_group == 0 else f"{new_group} –≥—Ä—É–ø–ø–∞"
    await callback.answer(f"–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {group_text}")


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
@dp.message(ScheduleStates.waiting_for_url)
async def get_schedule_url(message: types.Message, state: FSMContext):
    url = message.text.strip()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    status_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É...")

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        file_name = f"{user_id}.csv"
        file_path = os.path.join(USER_SCHEDULES_DIR, file_name)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
        if os.path.exists(file_path):
            os.remove(file_path)

        # –°–∫–∞—á–∏–≤–∞–µ–º CSV —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
        file_path = await download_schedule(url, file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # await message.answer_document(types.FSInputFile(file_path), caption="üìÅ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (CSV)")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        df = pd.read_csv(file_path, sep=";")  # —É—Ç–æ—á–Ω–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        print(df.head())  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—Å—ë —É—Å–ø–µ—à–Ω–æ
        await status_message.edit_text(
            "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=get_main_keyboard(user_id)
        )

    except Exception as e:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n{e}")

    await state.clear()


@dp.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_state = user_notifications.get(user_id, False)
    user_notifications[user_id] = not current_state
    new_state = user_notifications[user_id]
    keyboard = get_main_keyboard(user_id)
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {status_text} ‚úÖ")


@dp.callback_query(F.data.startswith('day_'))
async def navigate_day(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    date_str = callback.data.split('_', 1)[1]
    date = datetime.strptime(date_str, "%Y-%m-%d").date()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = await get_schedule_data_for_day(date, user_id)

    # –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    min_date = date.replace(day=1)
    if date.month == 12:
        max_date = date.replace(year=date.year + 1, month=1, day=1) - timedelta(days=1)
    else:
        max_date = date.replace(month=date.month + 1, day=1) - timedelta(days=1)

    keyboard = get_day_navigation_keyboard(date, min_date, max_date)
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == 'main_menu')
async def back_to_main_menu_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–Ω—è—Ç–∏—è.\n\n"
        "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª `Plany.csv`."
    )
    await callback.message.edit_text(text, reply_markup=get_main_keyboard(user_id))


# --- –ó–ê–ü–£–°–ö ---
async def main():
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –±–µ–∑ await
    asyncio.create_task(send_notifications())
    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
